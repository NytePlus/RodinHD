import osimport jsonimport numpy as npfrom tqdm import tqdmif __name__ == '__main__':    data_dir = '/data/wcc/lrm_data'    outputs_dir = '/home/wcc/RodinHD/data/raw_data_300'    fitting_obj_list_dir = '/home/wcc/RodinHD/data/fitting_obj_list.txt'    mvp_dirs = os.listdir(data_dir)    if not os.path.exists(outputs_dir):        os.mkdir(outputs_dir)    intri = None    objs = []    for mvp_dir in tqdm(mvp_dirs):        rgb_dirs = os.listdir(os.path.join(data_dir, mvp_dir, 'rgba'))        for rgb_dir in rgb_dirs:            id = rgb_dir.split(".")[0]            pose = np.load(os.path.join(data_dir, mvp_dir, f'pose/{id}.npy'))            if os.path.exists(os.path.join(data_dir, mvp_dir, 'intrinsics.npy')):                intri = np.load(os.path.join(data_dir, mvp_dir, 'intrinsics.npy'))            fx, fy = intri[0, 0], intri[0, 1]            cx, cy = intri[1, 0], intri[1, 1]            resolution = (int(intri[2, 0]), int(intri[2, 1]))            sensor_width = 36.0            meta = {                "cameras": [{                    "resolution": resolution,                    "focal_length": fx,                    "sensor_width": sensor_width,                    "transformation": pose.tolist()                }]            }            output_dir = os.path.join(outputs_dir, mvp_dir)            if not os.path.exists(output_dir):                os.mkdir(output_dir)            with open(os.path.join(output_dir, f'metadata_000{id}.json'), 'w') as json_file:                json.dump(meta, json_file, indent=4)            os.symlink(os.path.join(data_dir, mvp_dir, f'rgba/{id}.png'), os.path.join(output_dir, f'img_proc_fg_000{id}.png'))        objs.append(output_dir)    objs = sorted(objs, key=lambda x: (int(x.split('/')[-1].split('_')[0]), int(x.split('/')[-1].split('_')[1])))    with open(fitting_obj_list_dir, 'w') as obj_list:        for obj in objs:            obj_list.write(obj + '\n')